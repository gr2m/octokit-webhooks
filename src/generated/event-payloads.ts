// THIS FILE IS GENERATED - DO NOT EDIT DIRECTLY
// make edits in scripts/generate-types.js

export declare module EventPayloads {
  type Item = {
    url: string;
    id: number;
    number: number;
    head: ItemHead;
    base: ItemBase;
  };
  type ItemBase = { ref: string; sha: string; repo: ItemBaseRepo };
  type ItemBaseRepo = { id: number; url: string; name: string };
  type ItemHead = { ref: string; sha: string; repo: ItemHeadRepo };
  type ItemHeadRepo = { id: number; url: string; name: string };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    hooks_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: WebhookPayloadWorkflowRunRequestedActionWorkflowRunRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    hooks_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadCommitCommitter = {
    email: string;
    name: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadCommitAuthor = {
    email: string;
    name: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadCommit = {
    author: WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadCommitAuthor;
    committer: WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadCommitCommitter;
    id: string;
    message: string;
    timestamp: string;
    tree_id: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflowRun = {
    artifacts_url: string;
    cancel_url: string;
    check_suite_url: string;
    conclusion: null;
    created_at: string;
    event: string;
    head_branch: string;
    head_commit: WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadCommit;
    head_repository: WebhookPayloadWorkflowRunRequestedActionWorkflowRunHeadRepository;
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    node_id: string;
    pull_requests: Array<any>;
    repository: WebhookPayloadWorkflowRunRequestedActionWorkflowRunRepository;
    rerun_url: string;
    run_number: number;
    status: string;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionWorkflow = {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionSender = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedActionOrganization = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunRequestedAction = {
    action: "requested";
    organization: WebhookPayloadWorkflowRunRequestedActionOrganization;
    repository: PayloadRepository;
    sender: WebhookPayloadWorkflowRunRequestedActionSender;
    workflow: WebhookPayloadWorkflowRunRequestedActionWorkflow;
    workflow_run: WebhookPayloadWorkflowRunRequestedActionWorkflowRun;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    hooks_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: WebhookPayloadWorkflowRunCompletedActionWorkflowRunRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadRepositoryOwner = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadRepository = {
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    description: string;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    hooks_url: string;
    html_url: string;
    id: number;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    name: string;
    node_id: string;
    notifications_url: string;
    owner: WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadRepositoryOwner;
    private: boolean;
    pulls_url: string;
    releases_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadCommitCommitter = {
    email: string;
    name: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadCommitAuthor = {
    email: string;
    name: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadCommit = {
    author: WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadCommitAuthor;
    committer: WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadCommitCommitter;
    id: string;
    message: string;
    timestamp: string;
    tree_id: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflowRun = {
    artifacts_url: string;
    cancel_url: string;
    check_suite_url: string;
    conclusion: string;
    created_at: string;
    event: string;
    head_branch: string;
    head_commit: WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadCommit;
    head_repository: WebhookPayloadWorkflowRunCompletedActionWorkflowRunHeadRepository;
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    node_id: string;
    pull_requests: Array<any>;
    repository: WebhookPayloadWorkflowRunCompletedActionWorkflowRunRepository;
    rerun_url: string;
    run_number: number;
    status: string;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionWorkflow = {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionSender = {
    avatar_url: string;
    events_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    gravatar_id: string;
    html_url: string;
    id: number;
    login: string;
    node_id: string;
    organizations_url: string;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedActionOrganization = {
    avatar_url: string;
    description: string;
    events_url: string;
    hooks_url: string;
    id: number;
    issues_url: string;
    login: string;
    members_url: string;
    node_id: string;
    public_members_url: string;
    repos_url: string;
    url: string;
  };
  type WebhookPayloadWorkflowRunCompletedAction = {
    action: "completed";
    organization: WebhookPayloadWorkflowRunCompletedActionOrganization;
    repository: PayloadRepository;
    sender: WebhookPayloadWorkflowRunCompletedActionSender;
    workflow?: WebhookPayloadWorkflowRunCompletedActionWorkflow;
    workflow_run?: WebhookPayloadWorkflowRunCompletedActionWorkflowRun;
  };
  type WebhookPayloadWorkflowRunActionAction = { action: "action" };
  type WebhookPayloadWorkflowDispatchSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadWorkflowDispatchOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadWorkflowDispatchInputs = {};
  type WebhookPayloadWorkflowDispatch = {
    inputs: WebhookPayloadWorkflowDispatchInputs;
    ref: string;
    repository: PayloadRepository;
    organization: WebhookPayloadWorkflowDispatchOrganization;
    sender: WebhookPayloadWorkflowDispatchSender;
    workflow: string;
  };
  type WebhookPayloadWatchStartedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadWatchStartedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadWatchStartedAction = {
    action: "started";
    repository: PayloadRepository;
    sender: WebhookPayloadWatchStartedActionSender;
    installation?: WebhookPayloadWatchStartedActionInstallation;
  };
  type WebhookPayloadTeamAddInstallation = { id: number; node_id: string };
  type WebhookPayloadTeamAddSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadTeamAddOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadTeamAddTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadTeamAdd = {
    team: WebhookPayloadTeamAddTeam;
    repository: PayloadRepository;
    organization: WebhookPayloadTeamAddOrganization;
    sender: WebhookPayloadTeamAddSender;
    installation?: WebhookPayloadTeamAddInstallation;
  };
  type WebhookPayloadTeamRemovedFromRepositoryAction = {
    action: "removed_from_repository";
  };
  type WebhookPayloadTeamEditedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadTeamEditedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadTeamEditedActionTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadTeamEditedActionChanges = {};
  type WebhookPayloadTeamEditedAction = {
    changes: WebhookPayloadTeamEditedActionChanges;
    action: "edited";
    team: WebhookPayloadTeamEditedActionTeam;
    organization: WebhookPayloadTeamEditedActionOrganization;
    sender: WebhookPayloadTeamEditedActionSender;
  };
  type WebhookPayloadTeamDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadTeamDeletedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadTeamDeletedActionTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadTeamDeletedAction = {
    action: "deleted";
    team: WebhookPayloadTeamDeletedActionTeam;
    organization: WebhookPayloadTeamDeletedActionOrganization;
    sender: WebhookPayloadTeamDeletedActionSender;
  };
  type WebhookPayloadTeamCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadTeamCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadTeamCreatedActionTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: null;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadTeamCreatedAction = {
    action: "created";
    team: WebhookPayloadTeamCreatedActionTeam;
    organization: WebhookPayloadTeamCreatedActionOrganization;
    sender: WebhookPayloadTeamCreatedActionSender;
  };
  type WebhookPayloadTeamAddedToRepositoryActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadTeamAddedToRepositoryActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type PayloadRepositoryPermissions = {
    pull: boolean;
    push: boolean;
    admin: boolean;
  };
  type WebhookPayloadTeamAddedToRepositoryActionTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadTeamAddedToRepositoryAction = {
    action: "added_to_repository";
    team: WebhookPayloadTeamAddedToRepositoryActionTeam;
    repository: PayloadRepository;
    organization: WebhookPayloadTeamAddedToRepositoryActionOrganization;
    sender: WebhookPayloadTeamAddedToRepositoryActionSender;
  };
  type WebhookPayloadStatusInstallation = { id: number; node_id: string };
  type WebhookPayloadStatusSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadStatusBranchesItemCommit = { sha: string; url: string };
  type WebhookPayloadStatusCommitCommitter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadStatusCommitAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadStatusCommitCommitVerification = {
    verified: boolean;
    reason: string;
    signature: string;
    payload: string;
  };
  type WebhookPayloadStatusCommitCommitTree = { sha: string; url: string };
  type WebhookPayloadStatusCommitCommitCommitter = {
    name: string;
    email: string;
    date: string;
  };
  type WebhookPayloadStatusCommitCommitAuthor = {
    name: string;
    email: string;
    date: string;
  };
  type WebhookPayloadStatusCommitCommit = {
    author: WebhookPayloadStatusCommitCommitAuthor;
    committer: WebhookPayloadStatusCommitCommitCommitter;
    message: string;
    tree: WebhookPayloadStatusCommitCommitTree;
    url: string;
    comment_count: number;
    verification: WebhookPayloadStatusCommitCommitVerification;
  };
  type WebhookPayloadStatusCommit = {
    sha: string;
    node_id: string;
    commit: WebhookPayloadStatusCommitCommit;
    url: string;
    html_url: string;
    comments_url: string;
    author: WebhookPayloadStatusCommitAuthor;
    committer: WebhookPayloadStatusCommitCommitter;
    parents: Array<any>;
  };
  type WebhookPayloadStatus = {
    id: number;
    sha: string;
    name: string;
    target_url: null;
    context: string;
    description: null;
    state: string;
    commit: WebhookPayloadStatusCommit;
    branches: Array<Item>;
    created_at: string;
    updated_at: string;
    repository: PayloadRepository;
    sender: WebhookPayloadStatusSender;
    installation?: WebhookPayloadStatusInstallation;
  };
  type WebhookPayloadStarDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadStarDeletedAction = {
    action: "deleted";
    starred_at: null;
    repository: PayloadRepository;
    sender: WebhookPayloadStarDeletedActionSender;
  };
  type WebhookPayloadStarCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadStarCreatedAction = {
    action: "created";
    starred_at: string;
    repository: PayloadRepository;
    sender: WebhookPayloadStarCreatedActionSender;
  };
  type WebhookPayloadSponsorshipTierChangedAction = { action: "tier_changed" };
  type WebhookPayloadSponsorshipPendingTierChangeActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionChangesTierFrom = {
    node_id: string;
    created_at: string;
    description: string;
    monthly_price_in_cents: number;
    monthly_price_in_dollars: number;
    name: string;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionChangesTier = {
    from: WebhookPayloadSponsorshipPendingTierChangeActionChangesTierFrom;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionChanges = {
    tier: WebhookPayloadSponsorshipPendingTierChangeActionChangesTier;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionSponsorshipTier = {
    node_id: string;
    created_at: string;
    description: string;
    monthly_price_in_cents: number;
    monthly_price_in_dollars: number;
    name: string;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionSponsorshipSponsor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionSponsorshipSponsorable = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSponsorshipPendingTierChangeActionSponsorship = {
    node_id: string;
    created_at: string;
    sponsorable: WebhookPayloadSponsorshipPendingTierChangeActionSponsorshipSponsorable;
    sponsor: WebhookPayloadSponsorshipPendingTierChangeActionSponsorshipSponsor;
    privacy_level: string;
    tier: WebhookPayloadSponsorshipPendingTierChangeActionSponsorshipTier;
  };
  type WebhookPayloadSponsorshipPendingTierChangeAction = {
    action: "pending_tier_change";
    sponsorship: WebhookPayloadSponsorshipPendingTierChangeActionSponsorship;
    changes: WebhookPayloadSponsorshipPendingTierChangeActionChanges;
    effective_date: string;
    sender: WebhookPayloadSponsorshipPendingTierChangeActionSender;
  };
  type WebhookPayloadSponsorshipPendingCancellationAction = {
    action: "pending_cancellation";
  };
  type WebhookPayloadSponsorshipEditedAction = { action: "edited" };
  type WebhookPayloadSponsorshipCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSponsorshipCreatedActionSponsorshipTier = {
    node_id: string;
    created_at: string;
    description: string;
    monthly_price_in_cents: number;
    monthly_price_in_dollars: number;
    name: string;
  };
  type WebhookPayloadSponsorshipCreatedActionSponsorshipSponsor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSponsorshipCreatedActionSponsorshipSponsorable = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSponsorshipCreatedActionSponsorship = {
    node_id: string;
    created_at: string;
    sponsorable: WebhookPayloadSponsorshipCreatedActionSponsorshipSponsorable;
    sponsor: WebhookPayloadSponsorshipCreatedActionSponsorshipSponsor;
    privacy_level: string;
    tier: WebhookPayloadSponsorshipCreatedActionSponsorshipTier;
  };
  type WebhookPayloadSponsorshipCreatedAction = {
    action: "created";
    sponsorship: WebhookPayloadSponsorshipCreatedActionSponsorship;
    sender: WebhookPayloadSponsorshipCreatedActionSender;
  };
  type WebhookPayloadSponsorshipCancelledAction = { action: "cancelled" };
  type WebhookPayloadSecurityAdvisoryUpdatedAction = { action: "updated" };
  type WebhookPayloadSecurityAdvisoryPublishedActionSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion = {
    identifier: string;
  };
  type WebhookPayloadSecurityAdvisoryPublishedActionSecurityAdvisoryVulnerabilitiesItemPackage = {
    ecosystem: string;
    name: string;
  };
  type WebhookPayloadSecurityAdvisoryPublishedActionSecurityAdvisory = {
    ghsa_id: string;
    summary: string;
    description: string;
    severity: string;
    identifiers: Array<Item>;
    references: Array<Item>;
    published_at: string;
    updated_at: string;
    withdrawn_at: null;
    vulnerabilities: Array<Item>;
  };
  type WebhookPayloadSecurityAdvisoryPublishedAction = {
    action: "published";
    security_advisory: WebhookPayloadSecurityAdvisoryPublishedActionSecurityAdvisory;
  };
  type WebhookPayloadSecurityAdvisoryPerformedAction = { action: "performed" };
  type WebhookPayloadSecretScanningAlertResolvedAction = { action: "resolved" };
  type WebhookPayloadSecretScanningAlertReopenedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadSecretScanningAlertReopenedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadSecretScanningAlertReopenedActionAlert = {
    number: number;
    secret_type: string;
    resolution: null;
    resolved_by: null;
    resolved_at: null;
  };
  type WebhookPayloadSecretScanningAlertReopenedAction = {
    action: "reopened";
    alert: WebhookPayloadSecretScanningAlertReopenedActionAlert;
    repository: PayloadRepository;
    organization: WebhookPayloadSecretScanningAlertReopenedActionOrganization;
    sender: WebhookPayloadSecretScanningAlertReopenedActionSender;
  };
  type WebhookPayloadSecretScanningAlertCreatedAction = { action: "created" };
  type WebhookPayloadRepositoryVulnerabilityAlertResolveAction = {
    action: "resolve";
  };
  type WebhookPayloadRepositoryVulnerabilityAlertDismissActionAlertDismisser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryVulnerabilityAlertDismissActionAlert = {
    id: number;
    affected_range: string;
    affected_package_name: string;
    external_reference: string;
    external_identifier: string;
    fixed_in: string;
    dismisser: WebhookPayloadRepositoryVulnerabilityAlertDismissActionAlertDismisser;
    dismiss_reason: string;
    dismissed_at: string;
  };
  type WebhookPayloadRepositoryVulnerabilityAlertDismissAction = {
    action: "dismiss";
    alert: WebhookPayloadRepositoryVulnerabilityAlertDismissActionAlert;
  };
  type WebhookPayloadRepositoryVulnerabilityAlertCreateActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadRepositoryVulnerabilityAlertCreateActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryVulnerabilityAlertCreateActionAlert = {
    id: number;
    affected_range: string;
    affected_package_name: string;
    external_reference: string;
    external_identifier: string;
    fixed_in: string;
    ghsa_id?: string;
    created_at?: string;
  };
  type WebhookPayloadRepositoryVulnerabilityAlertCreateAction = {
    action: "create";
    alert: WebhookPayloadRepositoryVulnerabilityAlertCreateActionAlert;
    repository: PayloadRepository;
    sender: WebhookPayloadRepositoryVulnerabilityAlertCreateActionSender;
    organization?: WebhookPayloadRepositoryVulnerabilityAlertCreateActionOrganization;
  };
  type WebhookPayloadRepositoryImportSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryImportOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadRepositoryImport = {
    status: string;
    repository: PayloadRepository;
    organization: WebhookPayloadRepositoryImportOrganization;
    sender: WebhookPayloadRepositoryImportSender;
  };
  type WebhookPayloadRepositoryUnarchivedAction = { action: "unarchived" };
  type WebhookPayloadRepositoryTransferredAction = { action: "transferred" };
  type WebhookPayloadRepositoryRenamedAction = { action: "renamed" };
  type WebhookPayloadRepositoryPublicizedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadRepositoryPublicizedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryPublicizedAction = {
    action: "publicized";
    repository: PayloadRepository;
    sender: WebhookPayloadRepositoryPublicizedActionSender;
    organization?: WebhookPayloadRepositoryPublicizedActionOrganization;
  };
  type WebhookPayloadRepositoryPrivatizedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryPrivatizedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadRepositoryPrivatizedAction = {
    action: "privatized";
    repository: PayloadRepository;
    organization?: WebhookPayloadRepositoryPrivatizedActionOrganization;
    sender: WebhookPayloadRepositoryPrivatizedActionSender;
  };
  type WebhookPayloadRepositoryEditedAction = { action: "edited" };
  type WebhookPayloadRepositoryDeletedAction = { action: "deleted" };
  type WebhookPayloadRepositoryCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadRepositoryCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadRepositoryCreatedAction = {
    action: "created";
    repository: PayloadRepository;
    organization: WebhookPayloadRepositoryCreatedActionOrganization;
    sender: WebhookPayloadRepositoryCreatedActionSender;
    installation?: WebhookPayloadRepositoryCreatedActionInstallation;
  };
  type WebhookPayloadRepositoryArchivedAction = { action: "archived" };
  type WebhookPayloadRepositoryDispatchOnDemandTestActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadRepositoryDispatchOnDemandTestActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadRepositoryDispatchOnDemandTestActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadRepositoryDispatchOnDemandTestActionClientPayload = {};
  type WebhookPayloadRepositoryDispatchOnDemandTestAction = {
    action: "on-demand-test";
    branch: string;
    client_payload: WebhookPayloadRepositoryDispatchOnDemandTestActionClientPayload;
    repository: PayloadRepository;
    organization: WebhookPayloadRepositoryDispatchOnDemandTestActionOrganization;
    sender: WebhookPayloadRepositoryDispatchOnDemandTestActionSender;
    installation: WebhookPayloadRepositoryDispatchOnDemandTestActionInstallation;
  };
  type WebhookPayloadReleaseUnpublishedAction = { action: "unpublished" };
  type WebhookPayloadReleaseReleasedAction = { action: "released" };
  type WebhookPayloadReleasePublishedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadReleasePublishedActionReleaseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadReleasePublishedActionRelease = {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: WebhookPayloadReleasePublishedActionReleaseAuthor;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: Array<any>;
    tarball_url: string;
    zipball_url: string;
    body: null;
  };
  type WebhookPayloadReleasePublishedAction = {
    action: "published";
    release: WebhookPayloadReleasePublishedActionRelease;
    repository: PayloadRepository;
    sender: WebhookPayloadReleasePublishedActionSender;
  };
  type WebhookPayloadReleasePrereleasedAction = { action: "prereleased" };
  type WebhookPayloadReleaseEditedAction = { action: "edited" };
  type WebhookPayloadReleaseDeletedAction = { action: "deleted" };
  type WebhookPayloadReleaseCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadReleaseCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadReleaseCreatedActionReleaseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadReleaseCreatedActionRelease = {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: WebhookPayloadReleaseCreatedActionReleaseAuthor;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: Array<any>;
    tarball_url: string;
    zipball_url: string;
    body: null;
  };
  type WebhookPayloadReleaseCreatedAction = {
    action: "created";
    release: WebhookPayloadReleaseCreatedActionRelease;
    repository: PayloadRepository;
    sender: WebhookPayloadReleaseCreatedActionSender;
    installation?: WebhookPayloadReleaseCreatedActionInstallation;
  };
  type WebhookPayloadPushOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPushInstallation = { id: number; node_id: string };
  type WebhookPayloadPushSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPushPusher = { name: string; email: string };
  type WebhookPayloadPush = {
    ref: string;
    before: string;
    after: string;
    created: boolean;
    deleted: boolean;
    forced: boolean;
    base_ref: null;
    compare: string;
    commits: Array<any>;
    head_commit: null;
    repository: PayloadRepository;
    pusher: WebhookPayloadPushPusher;
    sender: WebhookPayloadPushSender;
    installation?: WebhookPayloadPushInstallation;
    organization?: WebhookPayloadPushOrganization;
  };
  type WebhookPayloadPullRequestReviewCommentEditedAction = {
    action: "edited";
  };
  type WebhookPayloadPullRequestReviewCommentDeletedAction = {
    action: "deleted";
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestHead;
    base: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestBase;
    _links: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequestLinks;
    author_association: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinksPullRequest = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinks = {
    self: WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinksSelf;
    html: WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinksHtml;
    pull_request: WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinksPullRequest;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionCommentUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedActionComment = {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    user: WebhookPayloadPullRequestReviewCommentCreatedActionCommentUser;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: string;
    _links: WebhookPayloadPullRequestReviewCommentCreatedActionCommentLinks;
  };
  type WebhookPayloadPullRequestReviewCommentCreatedAction = {
    action: "created";
    comment: WebhookPayloadPullRequestReviewCommentCreatedActionComment;
    pull_request: WebhookPayloadPullRequestReviewCommentCreatedActionPullRequest;
    repository: PayloadRepository;
    sender: WebhookPayloadPullRequestReviewCommentCreatedActionSender;
    installation?: WebhookPayloadPullRequestReviewCommentCreatedActionInstallation;
    organization?: WebhookPayloadPullRequestReviewCommentCreatedActionOrganization;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestReviewSubmittedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestReviewSubmittedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestReviewSubmittedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestReviewSubmittedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestReviewSubmittedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestReviewSubmittedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestReviewSubmittedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestReviewSubmittedActionPullRequestHead;
    base: WebhookPayloadPullRequestReviewSubmittedActionPullRequestBase;
    _links: WebhookPayloadPullRequestReviewSubmittedActionPullRequestLinks;
    author_association: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionReviewLinksPullRequest = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionReviewLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionReviewLinks = {
    html: WebhookPayloadPullRequestReviewSubmittedActionReviewLinksHtml;
    pull_request: WebhookPayloadPullRequestReviewSubmittedActionReviewLinksPullRequest;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionReviewUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestReviewSubmittedActionReview = {
    id: number;
    node_id: string;
    user: WebhookPayloadPullRequestReviewSubmittedActionReviewUser;
    body: null;
    commit_id: string;
    submitted_at: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    author_association: string;
    _links: WebhookPayloadPullRequestReviewSubmittedActionReviewLinks;
  };
  type WebhookPayloadPullRequestReviewSubmittedAction = {
    action: "submitted";
    review: WebhookPayloadPullRequestReviewSubmittedActionReview;
    pull_request: WebhookPayloadPullRequestReviewSubmittedActionPullRequest;
    repository: PayloadRepository;
    sender: WebhookPayloadPullRequestReviewSubmittedActionSender;
    installation?: WebhookPayloadPullRequestReviewSubmittedActionInstallation;
    organization?: WebhookPayloadPullRequestReviewSubmittedActionOrganization;
  };
  type WebhookPayloadPullRequestReviewEditedAction = { action: "edited" };
  type WebhookPayloadPullRequestReviewDismissedAction = { action: "dismissed" };
  type WebhookPayloadPullRequestUnlockedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestUnlockedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlockedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestUnlockedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestUnlockedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestUnlockedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestUnlockedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestUnlockedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestUnlockedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestUnlockedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestUnlockedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestUnlockedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestUnlockedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestUnlockedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestUnlockedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestUnlockedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestUnlockedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlockedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestUnlockedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<any>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestUnlockedActionPullRequestHead;
    base: WebhookPayloadPullRequestUnlockedActionPullRequestBase;
    _links: WebhookPayloadPullRequestUnlockedActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestUnlockedAction = {
    action: "unlocked";
    number: number;
    pull_request: WebhookPayloadPullRequestUnlockedActionPullRequest;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestUnlockedActionInstallation;
    sender: WebhookPayloadPullRequestUnlockedActionSender;
    organization?: WebhookPayloadPullRequestUnlockedActionOrganization;
  };
  type WebhookPayloadPullRequestUnlabeledActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestLinks = {
    self: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestUnlabeledActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestUnlabeledActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestUnlabeledActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestUnlabeledActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestUnlabeledActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestUnlabeledActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestUnlabeledActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnlabeledActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestUnlabeledActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<any>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestUnlabeledActionPullRequestHead;
    base: WebhookPayloadPullRequestUnlabeledActionPullRequestBase;
    _links: WebhookPayloadPullRequestUnlabeledActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestUnlabeledAction = {
    action: "unlabeled";
    number: number;
    pull_request: WebhookPayloadPullRequestUnlabeledActionPullRequest;
    label: WebhookPayloadPullRequestUnlabeledActionLabel;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestUnlabeledActionInstallation;
    sender: WebhookPayloadPullRequestUnlabeledActionSender;
    organization?: WebhookPayloadPullRequestUnlabeledActionOrganization;
  };
  type WebhookPayloadPullRequestUnassignedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestUnassignedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestUnassignedActionAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestUnassignedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestUnassignedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestUnassignedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestUnassignedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestUnassignedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestUnassignedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestUnassignedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestUnassignedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestUnassignedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestUnassignedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestUnassignedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestUnassignedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestUnassignedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestUnassignedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadPullRequestUnassignedActionPullRequestMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestUnassignedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestUnassignedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: WebhookPayloadPullRequestUnassignedActionPullRequestAssignee;
    assignees: Array<Item>;
    requested_reviewers: Array<any>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: WebhookPayloadPullRequestUnassignedActionPullRequestMilestone;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestUnassignedActionPullRequestHead;
    base: WebhookPayloadPullRequestUnassignedActionPullRequestBase;
    _links: WebhookPayloadPullRequestUnassignedActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestUnassignedAction = {
    action: "unassigned";
    number: number;
    pull_request: WebhookPayloadPullRequestUnassignedActionPullRequest;
    assignee: WebhookPayloadPullRequestUnassignedActionAssignee;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestUnassignedActionInstallation;
    sender: WebhookPayloadPullRequestUnassignedActionSender;
    organization?: WebhookPayloadPullRequestUnassignedActionOrganization;
  };
  type WebhookPayloadPullRequestSynchronizeAction = { action: "synchronize" };
  type WebhookPayloadPullRequestReviewRequestedAction = {
    action: "review_requested";
  };
  type WebhookPayloadPullRequestReviewRequestRemovedAction = {
    action: "review_request_removed";
  };
  type WebhookPayloadPullRequestReopenedAction = { action: "reopened" };
  type WebhookPayloadPullRequestReadyForReviewAction = {
    action: "ready_for_review";
  };
  type WebhookPayloadPullRequestOpenedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestOpenedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestOpenedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestOpenedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestOpenedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestOpenedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestOpenedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestOpenedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestOpenedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestOpenedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestOpenedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestOpenedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestOpenedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestOpenedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestOpenedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestOpenedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestOpenedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestOpenedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestOpenedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: null;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestOpenedActionPullRequestHead;
    base: WebhookPayloadPullRequestOpenedActionPullRequestBase;
    _links: WebhookPayloadPullRequestOpenedActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: null;
    rebaseable: null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestOpenedAction = {
    action: "opened";
    number: number;
    pull_request: WebhookPayloadPullRequestOpenedActionPullRequest;
    repository: PayloadRepository;
    sender: WebhookPayloadPullRequestOpenedActionSender;
    installation?: WebhookPayloadPullRequestOpenedActionInstallation;
    organization?: WebhookPayloadPullRequestOpenedActionOrganization;
  };
  type WebhookPayloadPullRequestMergedAction = { action: "merged" };
  type WebhookPayloadPullRequestLockedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestLockedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLockedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestLockedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestLockedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestLockedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestLockedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestLockedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestLockedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestLockedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestLockedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestLockedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestLockedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestLockedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestLockedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestLockedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestLockedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestLockedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLockedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestLockedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestLockedActionPullRequestHead;
    base: WebhookPayloadPullRequestLockedActionPullRequestBase;
    _links: WebhookPayloadPullRequestLockedActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestLockedAction = {
    action: "locked";
    number: number;
    pull_request: WebhookPayloadPullRequestLockedActionPullRequest;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestLockedActionInstallation;
    sender: WebhookPayloadPullRequestLockedActionSender;
    organization?: WebhookPayloadPullRequestLockedActionOrganization;
  };
  type WebhookPayloadPullRequestLabeledActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestLabeledActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestLabeledActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestLinks = {
    self: WebhookPayloadPullRequestLabeledActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestLabeledActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestLabeledActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestLabeledActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestLabeledActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestLabeledActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestLabeledActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestLabeledActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestLabeledActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestLabeledActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestLabeledActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestLabeledActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestLabeledActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestLabeledActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadPullRequestLabeledActionPullRequestMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestLabeledActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestLabeledActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: WebhookPayloadPullRequestLabeledActionPullRequestAssignee;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: WebhookPayloadPullRequestLabeledActionPullRequestMilestone;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestLabeledActionPullRequestHead;
    base: WebhookPayloadPullRequestLabeledActionPullRequestBase;
    _links: WebhookPayloadPullRequestLabeledActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestLabeledAction = {
    action: "labeled";
    number: number;
    pull_request: WebhookPayloadPullRequestLabeledActionPullRequest;
    label: WebhookPayloadPullRequestLabeledActionLabel;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestLabeledActionInstallation;
    sender: WebhookPayloadPullRequestLabeledActionSender;
    organization?: WebhookPayloadPullRequestLabeledActionOrganization;
  };
  type WebhookPayloadPullRequestEditedAction = { action: "edited" };
  type WebhookPayloadPullRequestClosedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestClosedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestClosedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestClosedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestClosedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestClosedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestClosedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestClosedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestClosedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestClosedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestClosedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestClosedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestClosedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestClosedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestClosedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestClosedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestClosedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestClosedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestClosedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestClosedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestClosedActionPullRequestHead;
    base: WebhookPayloadPullRequestClosedActionPullRequestBase;
    _links: WebhookPayloadPullRequestClosedActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestClosedAction = {
    action: "closed";
    number: number;
    pull_request: WebhookPayloadPullRequestClosedActionPullRequest;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestClosedActionInstallation;
    sender: WebhookPayloadPullRequestClosedActionSender;
    organization?: WebhookPayloadPullRequestClosedActionOrganization;
  };
  type WebhookPayloadPullRequestAssignedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadPullRequestAssignedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadPullRequestAssignedActionAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksStatuses = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksCommits = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksReviewComment = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksReviewComments = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksComments = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksIssue = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksHtml = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinksSelf = {
    href: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestLinks = {
    self: WebhookPayloadPullRequestAssignedActionPullRequestLinksSelf;
    html: WebhookPayloadPullRequestAssignedActionPullRequestLinksHtml;
    issue: WebhookPayloadPullRequestAssignedActionPullRequestLinksIssue;
    comments: WebhookPayloadPullRequestAssignedActionPullRequestLinksComments;
    review_comments: WebhookPayloadPullRequestAssignedActionPullRequestLinksReviewComments;
    review_comment: WebhookPayloadPullRequestAssignedActionPullRequestLinksReviewComment;
    commits: WebhookPayloadPullRequestAssignedActionPullRequestLinksCommits;
    statuses: WebhookPayloadPullRequestAssignedActionPullRequestLinksStatuses;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestAssignedActionPullRequestBaseRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestBase = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestAssignedActionPullRequestBaseUser;
    repo: WebhookPayloadPullRequestAssignedActionPullRequestBaseRepo;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadPullRequestAssignedActionPullRequestHeadRepoOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestHead = {
    label: string;
    ref: string;
    sha: string;
    user: WebhookPayloadPullRequestAssignedActionPullRequestHeadUser;
    repo: WebhookPayloadPullRequestAssignedActionPullRequestHeadRepo;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequestUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPullRequestAssignedActionPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: WebhookPayloadPullRequestAssignedActionPullRequestUser;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: string;
    assignee: null;
    assignees: Array<Item>;
    requested_reviewers: Array<Item>;
    requested_teams: Array<any>;
    labels: Array<Item>;
    milestone: null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: WebhookPayloadPullRequestAssignedActionPullRequestHead;
    base: WebhookPayloadPullRequestAssignedActionPullRequestBase;
    _links: WebhookPayloadPullRequestAssignedActionPullRequestLinks;
    author_association: string;
    draft: boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable: boolean;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type WebhookPayloadPullRequestAssignedAction = {
    action: "assigned";
    number: number;
    pull_request: WebhookPayloadPullRequestAssignedActionPullRequest;
    assignee: WebhookPayloadPullRequestAssignedActionAssignee;
    repository: PayloadRepository;
    installation: WebhookPayloadPullRequestAssignedActionInstallation;
    sender: WebhookPayloadPullRequestAssignedActionSender;
    organization?: WebhookPayloadPullRequestAssignedActionOrganization;
  };
  type WebhookPayloadPublicInstallation = { id: number; node_id: string };
  type WebhookPayloadPublicSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPublic = {
    repository: PayloadRepository;
    sender: WebhookPayloadPublicSender;
    installation?: WebhookPayloadPublicInstallation;
  };
  type WebhookPayloadProjectReopenedAction = { action: "reopened" };
  type WebhookPayloadProjectEditedAction = { action: "edited" };
  type WebhookPayloadProjectDeletedAction = { action: "deleted" };
  type WebhookPayloadProjectCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadProjectCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadProjectCreatedActionProjectCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadProjectCreatedActionProject = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: WebhookPayloadProjectCreatedActionProjectCreator;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadProjectCreatedAction = {
    action: "created";
    project: WebhookPayloadProjectCreatedActionProject;
    repository: PayloadRepository;
    sender: WebhookPayloadProjectCreatedActionSender;
    installation?: WebhookPayloadProjectCreatedActionInstallation;
  };
  type WebhookPayloadProjectClosedAction = { action: "closed" };
  type WebhookPayloadProjectColumnMovedAction = { action: "moved" };
  type WebhookPayloadProjectColumnEditedAction = { action: "edited" };
  type WebhookPayloadProjectColumnDeletedAction = { action: "deleted" };
  type WebhookPayloadProjectColumnCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadProjectColumnCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadProjectColumnCreatedActionProjectColumn = {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadProjectColumnCreatedAction = {
    action: "created";
    project_column: WebhookPayloadProjectColumnCreatedActionProjectColumn;
    repository: PayloadRepository;
    sender: WebhookPayloadProjectColumnCreatedActionSender;
    installation?: WebhookPayloadProjectColumnCreatedActionInstallation;
  };
  type WebhookPayloadProjectCardMovedAction = { action: "moved" };
  type WebhookPayloadProjectCardEditedAction = { action: "edited" };
  type WebhookPayloadProjectCardDeletedAction = { action: "deleted" };
  type WebhookPayloadProjectCardCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadProjectCardCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadProjectCardCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadProjectCardCreatedActionProjectCardCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadProjectCardCreatedActionProjectCard = {
    url: string;
    project_url: string;
    column_url: string;
    column_id: number;
    id: number;
    node_id: string;
    note: string;
    archived: boolean;
    creator: WebhookPayloadProjectCardCreatedActionProjectCardCreator;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadProjectCardCreatedAction = {
    action: "created";
    project_card: WebhookPayloadProjectCardCreatedActionProjectCard;
    repository: PayloadRepository;
    sender: WebhookPayloadProjectCardCreatedActionSender;
    installation?: WebhookPayloadProjectCardCreatedActionInstallation;
    organization?: WebhookPayloadProjectCardCreatedActionOrganization;
  };
  type WebhookPayloadProjectCardConvertedAction = { action: "converted" };
  type WebhookPayloadPingOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadPingSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPingHookLastResponse = {
    code: null;
    status: string;
    message: null;
  };
  type WebhookPayloadPingHookConfig = {
    content_type: string;
    url: string;
    insecure_ssl: string;
    secret?: string;
  };
  type WebhookPayloadPingHook = {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: Array<any>;
    config: WebhookPayloadPingHookConfig;
    updated_at: string;
    created_at: string;
    url: string;
    test_url?: string;
    ping_url: string;
    last_response?: WebhookPayloadPingHookLastResponse;
  };
  type WebhookPayloadPing = {
    zen: string;
    hook_id: number;
    hook: WebhookPayloadPingHook;
    repository?: PayloadRepository;
    sender: WebhookPayloadPingSender;
    organization?: WebhookPayloadPingOrganization;
  };
  type WebhookPayloadPageBuildInstallation = { id: number; node_id: string };
  type WebhookPayloadPageBuildSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPageBuildBuildPusher = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPageBuildBuildError = { message: null };
  type WebhookPayloadPageBuildBuild = {
    url: string;
    status: string;
    error: WebhookPayloadPageBuildBuildError;
    pusher: WebhookPayloadPageBuildBuildPusher;
    commit: string;
    duration: number;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadPageBuild = {
    id: number;
    build: WebhookPayloadPageBuildBuild;
    repository: PayloadRepository;
    sender: WebhookPayloadPageBuildSender;
    installation?: WebhookPayloadPageBuildInstallation;
  };
  type WebhookPayloadPackageUpdatedAction = { action: "updated" };
  type WebhookPayloadPackagePublishedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPackagePublishedActionPackageRegistry = {
    about_url: string;
    name: string;
    type: string;
    url: string;
    vendor: string;
  };
  type WebhookPayloadPackagePublishedActionPackagePackageVersionAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPackagePublishedActionPackagePackageVersionReleaseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPackagePublishedActionPackagePackageVersionRelease = {
    url: string;
    html_url: string;
    id: number;
    tag_name: string;
    target_commitish: string;
    name: string;
    draft: boolean;
    author: WebhookPayloadPackagePublishedActionPackagePackageVersionReleaseAuthor;
    prerelease: boolean;
    created_at: string;
    published_at: string;
  };
  type WebhookPayloadPackagePublishedActionPackagePackageVersion = {
    id: number;
    version: string;
    summary: string;
    body: string;
    body_html: string;
    release: WebhookPayloadPackagePublishedActionPackagePackageVersionRelease;
    manifest: string;
    html_url: string;
    tag_name: string;
    target_commitish: string;
    target_oid: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    updated_at: string;
    metadata: Array<any>;
    package_files: Array<Item>;
    author: WebhookPayloadPackagePublishedActionPackagePackageVersionAuthor;
    installation_command: string;
  };
  type WebhookPayloadPackagePublishedActionPackageOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadPackagePublishedActionPackage = {
    id: number;
    name: string;
    package_type: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    owner: WebhookPayloadPackagePublishedActionPackageOwner;
    package_version: WebhookPayloadPackagePublishedActionPackagePackageVersion;
    registry: WebhookPayloadPackagePublishedActionPackageRegistry;
  };
  type WebhookPayloadPackagePublishedAction = {
    action: "published";
    package: WebhookPayloadPackagePublishedActionPackage;
    repository: PayloadRepository;
    sender: WebhookPayloadPackagePublishedActionSender;
  };
  type WebhookPayloadOrgBlockUnblockedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadOrgBlockUnblockedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadOrgBlockUnblockedActionBlockedUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadOrgBlockUnblockedAction = {
    action: "unblocked";
    blocked_user: WebhookPayloadOrgBlockUnblockedActionBlockedUser;
    organization: WebhookPayloadOrgBlockUnblockedActionOrganization;
    sender: WebhookPayloadOrgBlockUnblockedActionSender;
  };
  type WebhookPayloadOrgBlockBlockedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadOrgBlockBlockedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadOrgBlockBlockedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadOrgBlockBlockedActionBlockedUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadOrgBlockBlockedAction = {
    action: "blocked";
    blocked_user: WebhookPayloadOrgBlockBlockedActionBlockedUser;
    organization: WebhookPayloadOrgBlockBlockedActionOrganization;
    sender: WebhookPayloadOrgBlockBlockedActionSender;
    installation?: WebhookPayloadOrgBlockBlockedActionInstallation;
  };
  type WebhookPayloadOrganizationRenamedAction = { action: "renamed" };
  type WebhookPayloadOrganizationMemberRemovedAction = {
    action: "member_removed";
  };
  type WebhookPayloadOrganizationMemberInvitedAction = {
    action: "member_invited";
  };
  type WebhookPayloadOrganizationMemberAddedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadOrganizationMemberAddedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadOrganizationMemberAddedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadOrganizationMemberAddedActionMembershipUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadOrganizationMemberAddedActionMembership = {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    user: WebhookPayloadOrganizationMemberAddedActionMembershipUser;
  };
  type WebhookPayloadOrganizationMemberAddedAction = {
    action: "member_added";
    membership: WebhookPayloadOrganizationMemberAddedActionMembership;
    organization: WebhookPayloadOrganizationMemberAddedActionOrganization;
    sender: WebhookPayloadOrganizationMemberAddedActionSender;
    installation?: WebhookPayloadOrganizationMemberAddedActionInstallation;
  };
  type WebhookPayloadOrganizationDeletedAction = { action: "deleted" };
  type WebhookPayloadMilestoneOpenedAction = { action: "opened" };
  type WebhookPayloadMilestoneEditedAction = { action: "edited" };
  type WebhookPayloadMilestoneDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMilestoneDeletedActionMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMilestoneDeletedActionMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadMilestoneDeletedActionMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadMilestoneDeletedAction = {
    action: "deleted";
    milestone: WebhookPayloadMilestoneDeletedActionMilestone;
    repository: PayloadRepository;
    sender: WebhookPayloadMilestoneDeletedActionSender;
  };
  type WebhookPayloadMilestoneCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMilestoneCreatedActionMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMilestoneCreatedActionMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadMilestoneCreatedActionMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: null;
  };
  type WebhookPayloadMilestoneCreatedAction = {
    action: "created";
    milestone: WebhookPayloadMilestoneCreatedActionMilestone;
    repository: PayloadRepository;
    sender: WebhookPayloadMilestoneCreatedActionSender;
  };
  type WebhookPayloadMilestoneClosedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadMilestoneClosedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMilestoneClosedActionMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMilestoneClosedActionMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadMilestoneClosedActionMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadMilestoneClosedAction = {
    action: "closed";
    milestone: WebhookPayloadMilestoneClosedActionMilestone;
    repository: PayloadRepository;
    sender: WebhookPayloadMilestoneClosedActionSender;
    installation?: WebhookPayloadMilestoneClosedActionInstallation;
  };
  type WebhookPayloadMetaDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMetaDeletedActionHookConfig = {
    content_type: string;
    insecure_ssl: string;
    url: string;
  };
  type WebhookPayloadMetaDeletedActionHook = {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: Array<any>;
    config: WebhookPayloadMetaDeletedActionHookConfig;
    updated_at: string;
    created_at: string;
  };
  type WebhookPayloadMetaDeletedAction = {
    action: "deleted";
    hook_id: number;
    hook: WebhookPayloadMetaDeletedActionHook;
    repository: PayloadRepository;
    sender: WebhookPayloadMetaDeletedActionSender;
  };
  type WebhookPayloadMembershipRemovedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadMembershipRemovedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadMembershipRemovedActionTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadMembershipRemovedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMembershipRemovedActionMember = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMembershipRemovedAction = {
    action: "removed";
    scope: string;
    member: WebhookPayloadMembershipRemovedActionMember;
    sender: WebhookPayloadMembershipRemovedActionSender;
    team: WebhookPayloadMembershipRemovedActionTeam;
    organization: WebhookPayloadMembershipRemovedActionOrganization;
    installation?: WebhookPayloadMembershipRemovedActionInstallation;
  };
  type WebhookPayloadMembershipAddedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadMembershipAddedActionTeam = {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  type WebhookPayloadMembershipAddedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMembershipAddedActionMember = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMembershipAddedAction = {
    action: "added";
    scope: string;
    member: WebhookPayloadMembershipAddedActionMember;
    sender: WebhookPayloadMembershipAddedActionSender;
    team: WebhookPayloadMembershipAddedActionTeam;
    organization: WebhookPayloadMembershipAddedActionOrganization;
  };
  type WebhookPayloadMemberRemovedAction = { action: "removed" };
  type WebhookPayloadMemberEditedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMemberEditedActionChangesPermission = { from: string };
  type WebhookPayloadMemberEditedActionChanges = {
    permission: WebhookPayloadMemberEditedActionChangesPermission;
  };
  type WebhookPayloadMemberEditedActionMember = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMemberEditedAction = {
    action: "edited";
    member: WebhookPayloadMemberEditedActionMember;
    changes: WebhookPayloadMemberEditedActionChanges;
    repository: PayloadRepository;
    sender: WebhookPayloadMemberEditedActionSender;
  };
  type WebhookPayloadMemberAddedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadMemberAddedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMemberAddedActionMember = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadMemberAddedAction = {
    action: "added";
    member: WebhookPayloadMemberAddedActionMember;
    repository: PayloadRepository;
    sender: WebhookPayloadMemberAddedActionSender;
    installation?: WebhookPayloadMemberAddedActionInstallation;
  };
  type WebhookPayloadMarketplacePurchasePurchasedActionMarketplacePurchasePlan = {
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: string;
    bullets: Array<any>;
  };
  type WebhookPayloadMarketplacePurchasePurchasedActionMarketplacePurchaseAccount = {
    type: string;
    id: number;
    login: string;
    organization_billing_email: string;
  };
  type WebhookPayloadMarketplacePurchasePurchasedActionMarketplacePurchase = {
    account: WebhookPayloadMarketplacePurchasePurchasedActionMarketplacePurchaseAccount;
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date: string;
    plan: WebhookPayloadMarketplacePurchasePurchasedActionMarketplacePurchasePlan;
  };
  type WebhookPayloadMarketplacePurchasePurchasedActionSender = {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    email: string;
  };
  type WebhookPayloadMarketplacePurchasePurchasedAction = {
    action: "purchased";
    effective_date: string;
    sender: WebhookPayloadMarketplacePurchasePurchasedActionSender;
    marketplace_purchase: WebhookPayloadMarketplacePurchasePurchasedActionMarketplacePurchase;
  };
  type WebhookPayloadMarketplacePurchasePendingChangeCancelledAction = {
    action: "pending_change_cancelled";
  };
  type WebhookPayloadMarketplacePurchasePendingChangeAction = {
    action: "pending_change";
  };
  type WebhookPayloadMarketplacePurchaseChangedActionPreviousMarketplacePurchasePlan = {
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: string;
    bullets: Array<any>;
  };
  type WebhookPayloadMarketplacePurchaseChangedActionPreviousMarketplacePurchaseAccount = {
    type: string;
    id: number;
    login: string;
    organization_billing_email: string;
  };
  type WebhookPayloadMarketplacePurchaseChangedActionPreviousMarketplacePurchase = {
    account: WebhookPayloadMarketplacePurchaseChangedActionPreviousMarketplacePurchaseAccount;
    billing_cycle: string;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    unit_count: number;
    plan: WebhookPayloadMarketplacePurchaseChangedActionPreviousMarketplacePurchasePlan;
  };
  type WebhookPayloadMarketplacePurchaseChangedActionMarketplacePurchasePlan = {
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: string;
    bullets: Array<any>;
  };
  type WebhookPayloadMarketplacePurchaseChangedActionMarketplacePurchaseAccount = {
    type: string;
    id: number;
    login: string;
    organization_billing_email: string;
  };
  type WebhookPayloadMarketplacePurchaseChangedActionMarketplacePurchase = {
    account: WebhookPayloadMarketplacePurchaseChangedActionMarketplacePurchaseAccount;
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date: string;
    plan: WebhookPayloadMarketplacePurchaseChangedActionMarketplacePurchasePlan;
  };
  type WebhookPayloadMarketplacePurchaseChangedActionSender = {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    email: string;
  };
  type WebhookPayloadMarketplacePurchaseChangedAction = {
    action: "changed";
    effective_date: string;
    sender: WebhookPayloadMarketplacePurchaseChangedActionSender;
    marketplace_purchase: WebhookPayloadMarketplacePurchaseChangedActionMarketplacePurchase;
    previous_marketplace_purchase: WebhookPayloadMarketplacePurchaseChangedActionPreviousMarketplacePurchase;
  };
  type WebhookPayloadMarketplacePurchaseCancelledActionMarketplacePurchasePlan = {
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<any>;
  };
  type WebhookPayloadMarketplacePurchaseCancelledActionMarketplacePurchaseAccount = {
    type: string;
    id: number;
    login: string;
    organization_billing_email: string;
  };
  type WebhookPayloadMarketplacePurchaseCancelledActionMarketplacePurchase = {
    account: WebhookPayloadMarketplacePurchaseCancelledActionMarketplacePurchaseAccount;
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date: string;
    plan: WebhookPayloadMarketplacePurchaseCancelledActionMarketplacePurchasePlan;
  };
  type WebhookPayloadMarketplacePurchaseCancelledActionSender = {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    email: string;
  };
  type WebhookPayloadMarketplacePurchaseCancelledAction = {
    action: "cancelled";
    effective_date: string;
    sender: WebhookPayloadMarketplacePurchaseCancelledActionSender;
    marketplace_purchase: WebhookPayloadMarketplacePurchaseCancelledActionMarketplacePurchase;
  };
  type WebhookPayloadLabelEditedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadLabelEditedActionChangesColor = { from: string };
  type WebhookPayloadLabelEditedActionChanges = {
    color: WebhookPayloadLabelEditedActionChangesColor;
  };
  type WebhookPayloadLabelEditedActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadLabelEditedAction = {
    action: "edited";
    label: WebhookPayloadLabelEditedActionLabel;
    changes: WebhookPayloadLabelEditedActionChanges;
    repository: PayloadRepository;
    sender: WebhookPayloadLabelEditedActionSender;
  };
  type WebhookPayloadLabelDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadLabelDeletedActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadLabelDeletedAction = {
    action: "deleted";
    label: WebhookPayloadLabelDeletedActionLabel;
    repository: PayloadRepository;
    sender: WebhookPayloadLabelDeletedActionSender;
  };
  type WebhookPayloadLabelCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadLabelCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadLabelCreatedActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadLabelCreatedAction = {
    action: "created";
    label: WebhookPayloadLabelCreatedActionLabel;
    repository: PayloadRepository;
    sender: WebhookPayloadLabelCreatedActionSender;
    installation?: WebhookPayloadLabelCreatedActionInstallation;
  };
  type WebhookPayloadIssuesUnpinnedAction = { action: "unpinned" };
  type WebhookPayloadIssuesUnlockedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesUnlockedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnlockedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnlockedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesUnlockedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: null;
    assignees: Array<Item>;
    milestone: null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesUnlockedAction = {
    action: "unlocked";
    issue: WebhookPayloadIssuesUnlockedActionIssue;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesUnlockedActionSender;
    organization?: WebhookPayloadIssuesUnlockedActionOrganization;
  };
  type WebhookPayloadIssuesUnlabeledActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesUnlabeledActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnlabeledActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadIssuesUnlabeledActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnlabeledActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesUnlabeledActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: null;
    assignees: Array<Item>;
    milestone: null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesUnlabeledAction = {
    action: "unlabeled";
    issue: WebhookPayloadIssuesUnlabeledActionIssue;
    label: WebhookPayloadIssuesUnlabeledActionLabel;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesUnlabeledActionSender;
    organization?: WebhookPayloadIssuesUnlabeledActionOrganization;
  };
  type WebhookPayloadIssuesUnassignedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesUnassignedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnassignedActionAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnassignedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnassignedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssuesUnassignedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssuesUnassignedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnassignedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesUnassignedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesUnassignedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssuesUnassignedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssuesUnassignedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesUnassignedAction = {
    action: "unassigned";
    issue: WebhookPayloadIssuesUnassignedActionIssue;
    assignee: WebhookPayloadIssuesUnassignedActionAssignee;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesUnassignedActionSender;
    organization?: WebhookPayloadIssuesUnassignedActionOrganization;
  };
  type WebhookPayloadIssuesTransferredAction = { action: "transferred" };
  type WebhookPayloadIssuesReopenedAction = { action: "reopened" };
  type WebhookPayloadIssuesPinnedAction = { action: "pinned" };
  type WebhookPayloadIssuesOpenedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesOpenedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesOpenedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesOpenedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssuesOpenedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssuesOpenedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesOpenedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesOpenedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesOpenedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssuesOpenedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssuesOpenedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesOpenedAction = {
    action: "opened";
    issue: WebhookPayloadIssuesOpenedActionIssue;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesOpenedActionSender;
    organization?: WebhookPayloadIssuesOpenedActionOrganization;
  };
  type WebhookPayloadIssuesMilestonedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesMilestonedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesMilestonedActionIssuePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type WebhookPayloadIssuesMilestonedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesMilestonedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssuesMilestonedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssuesMilestonedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesMilestonedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesMilestonedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesMilestonedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssuesMilestonedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssuesMilestonedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    pull_request: WebhookPayloadIssuesMilestonedActionIssuePullRequest;
    body: string;
  };
  type WebhookPayloadIssuesMilestonedAction = {
    action: "milestoned";
    issue: WebhookPayloadIssuesMilestonedActionIssue;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesMilestonedActionSender;
    organization?: WebhookPayloadIssuesMilestonedActionOrganization;
  };
  type WebhookPayloadIssuesLockedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesLockedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesLockedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesLockedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesLockedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: null;
    assignees: Array<Item>;
    milestone: null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesLockedAction = {
    action: "locked";
    issue: WebhookPayloadIssuesLockedActionIssue;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesLockedActionSender;
    organization?: WebhookPayloadIssuesLockedActionOrganization;
  };
  type WebhookPayloadIssuesLabeledActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesLabeledActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesLabeledActionLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  type WebhookPayloadIssuesLabeledActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesLabeledActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssuesLabeledActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssuesLabeledActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesLabeledActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesLabeledActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesLabeledActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssuesLabeledActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssuesLabeledActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesLabeledAction = {
    action: "labeled";
    issue: WebhookPayloadIssuesLabeledActionIssue;
    label: WebhookPayloadIssuesLabeledActionLabel;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesLabeledActionSender;
    organization?: WebhookPayloadIssuesLabeledActionOrganization;
  };
  type WebhookPayloadIssuesEditedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesEditedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesEditedActionChanges = {};
  type WebhookPayloadIssuesEditedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesEditedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssuesEditedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssuesEditedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesEditedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesEditedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesEditedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssuesEditedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssuesEditedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesEditedAction = {
    action: "edited";
    issue: WebhookPayloadIssuesEditedActionIssue;
    changes: WebhookPayloadIssuesEditedActionChanges;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesEditedActionSender;
    organization?: WebhookPayloadIssuesEditedActionOrganization;
  };
  type WebhookPayloadIssuesDemilestonedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesDemilestonedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesDemilestonedActionIssuePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type WebhookPayloadIssuesDemilestonedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesDemilestonedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesDemilestonedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: null;
    assignees: Array<Item>;
    milestone: null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    pull_request: WebhookPayloadIssuesDemilestonedActionIssuePullRequest;
    body: string;
  };
  type WebhookPayloadIssuesDemilestonedAction = {
    action: "demilestoned";
    issue: WebhookPayloadIssuesDemilestonedActionIssue;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesDemilestonedActionSender;
    organization?: WebhookPayloadIssuesDemilestonedActionOrganization;
  };
  type WebhookPayloadIssuesDeletedAction = { action: "deleted" };
  type WebhookPayloadIssuesClosedAction = { action: "closed" };
  type WebhookPayloadIssuesAssignedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssuesAssignedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadIssuesAssignedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesAssignedActionAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesAssignedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesAssignedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssuesAssignedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssuesAssignedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesAssignedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssuesAssignedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssuesAssignedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssuesAssignedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssuesAssignedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssuesAssignedAction = {
    action: "assigned";
    issue: WebhookPayloadIssuesAssignedActionIssue;
    assignee: WebhookPayloadIssuesAssignedActionAssignee;
    repository: PayloadRepository;
    sender: WebhookPayloadIssuesAssignedActionSender;
    installation?: WebhookPayloadIssuesAssignedActionInstallation;
    organization?: WebhookPayloadIssuesAssignedActionOrganization;
  };
  type WebhookPayloadIssueCommentEditedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssueCommentEditedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentEditedActionCommentUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentEditedActionComment = {
    url: string;
    html_url: string;
    issue_url: string;
    id: number;
    node_id: string;
    user: WebhookPayloadIssueCommentEditedActionCommentUser;
    created_at: string;
    updated_at: string;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssueCommentEditedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentEditedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssueCommentEditedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssueCommentEditedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentEditedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentEditedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssueCommentEditedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssueCommentEditedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssueCommentEditedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssueCommentEditedActionChangesBody = { from: string };
  type WebhookPayloadIssueCommentEditedActionChanges = {
    body: WebhookPayloadIssueCommentEditedActionChangesBody;
  };
  type WebhookPayloadIssueCommentEditedAction = {
    action: "edited";
    changes: WebhookPayloadIssueCommentEditedActionChanges;
    issue: WebhookPayloadIssueCommentEditedActionIssue;
    comment: WebhookPayloadIssueCommentEditedActionComment;
    repository: PayloadRepository;
    sender: WebhookPayloadIssueCommentEditedActionSender;
    organization?: WebhookPayloadIssueCommentEditedActionOrganization;
  };
  type WebhookPayloadIssueCommentDeletedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssueCommentDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentDeletedActionCommentUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentDeletedActionComment = {
    url: string;
    html_url: string;
    issue_url: string;
    id: number;
    node_id: string;
    user: WebhookPayloadIssueCommentDeletedActionCommentUser;
    created_at: string;
    updated_at: string;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssueCommentDeletedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentDeletedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssueCommentDeletedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssueCommentDeletedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentDeletedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentDeletedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssueCommentDeletedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssueCommentDeletedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssueCommentDeletedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssueCommentDeletedAction = {
    action: "deleted";
    issue: WebhookPayloadIssueCommentDeletedActionIssue;
    comment: WebhookPayloadIssueCommentDeletedActionComment;
    repository: PayloadRepository;
    sender: WebhookPayloadIssueCommentDeletedActionSender;
    organization?: WebhookPayloadIssueCommentDeletedActionOrganization;
  };
  type WebhookPayloadIssueCommentCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadIssueCommentCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadIssueCommentCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentCreatedActionCommentUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentCreatedActionComment = {
    url: string;
    html_url: string;
    issue_url: string;
    id: number;
    node_id: string;
    user: WebhookPayloadIssueCommentCreatedActionCommentUser;
    created_at: string;
    updated_at: string;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssueCommentCreatedActionIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentCreatedActionIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: WebhookPayloadIssueCommentCreatedActionIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string;
  };
  type WebhookPayloadIssueCommentCreatedActionIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentCreatedActionIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadIssueCommentCreatedActionIssue = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: WebhookPayloadIssueCommentCreatedActionIssueUser;
    labels: Array<Item>;
    state: string;
    locked: boolean;
    assignee: WebhookPayloadIssueCommentCreatedActionIssueAssignee;
    assignees: Array<Item>;
    milestone: WebhookPayloadIssueCommentCreatedActionIssueMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association: string;
    body: string;
  };
  type WebhookPayloadIssueCommentCreatedAction = {
    action: "created";
    issue: WebhookPayloadIssueCommentCreatedActionIssue;
    comment: WebhookPayloadIssueCommentCreatedActionComment;
    repository: PayloadRepository;
    sender: WebhookPayloadIssueCommentCreatedActionSender;
    organization?: WebhookPayloadIssueCommentCreatedActionOrganization;
    installation?: WebhookPayloadIssueCommentCreatedActionInstallation;
  };
  type WebhookPayloadInstallationRepositoriesRemovedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationRepositoriesRemovedActionInstallationPermissions = {
    metadata: string;
    contents: string;
    issues: string;
  };
  type WebhookPayloadInstallationRepositoriesRemovedActionInstallationAccount = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationRepositoriesRemovedActionInstallation = {
    id: number;
    account: WebhookPayloadInstallationRepositoriesRemovedActionInstallationAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: WebhookPayloadInstallationRepositoriesRemovedActionInstallationPermissions;
    events: Array<any>;
    created_at: number;
    updated_at: number;
    single_file_name: string;
  };
  type WebhookPayloadInstallationRepositoriesRemovedAction = {
    action: "removed";
    installation: WebhookPayloadInstallationRepositoriesRemovedActionInstallation;
    repository_selection: string;
    repositories_added: Array<any>;
    repositories_removed: Array<Item>;
    sender: WebhookPayloadInstallationRepositoriesRemovedActionSender;
  };
  type WebhookPayloadInstallationRepositoriesAddedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationRepositoriesAddedActionInstallationPermissions = {
    administration: string;
    statuses: string;
    repository_projects: string;
    repository_hooks: string;
    pull_requests: string;
    pages: string;
    issues: string;
    deployments: string;
    contents: string;
    checks: string;
    metadata: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadInstallationRepositoriesAddedActionInstallationAccount = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationRepositoriesAddedActionInstallation = {
    id: number;
    account: WebhookPayloadInstallationRepositoriesAddedActionInstallationAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: WebhookPayloadInstallationRepositoriesAddedActionInstallationPermissions;
    events: Array<any>;
    created_at: number;
    updated_at: number;
    single_file_name: null;
  };
  type WebhookPayloadInstallationRepositoriesAddedAction = {
    action: "added";
    installation: WebhookPayloadInstallationRepositoriesAddedActionInstallation;
    repository_selection: string;
    repositories_added: Array<Item>;
    repositories_removed: Array<any>;
    sender: WebhookPayloadInstallationRepositoriesAddedActionSender;
  };
  type WebhookPayloadInstallationUnsuspendAction = { action: "unsuspend" };
  type WebhookPayloadInstallationSuspendAction = { action: "suspend" };
  type WebhookPayloadInstallationNewPermissionsAcceptedAction = {
    action: "new_permissions_accepted";
  };
  type WebhookPayloadInstallationDeletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationDeletedActionInstallationPermissions = {
    metadata: string;
    contents: string;
    issues: string;
  };
  type WebhookPayloadInstallationDeletedActionInstallationAccount = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationDeletedActionInstallation = {
    id: number;
    account: WebhookPayloadInstallationDeletedActionInstallationAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: WebhookPayloadInstallationDeletedActionInstallationPermissions;
    events: Array<any>;
    created_at: number;
    updated_at: number;
    single_file_name: string;
  };
  type WebhookPayloadInstallationDeletedAction = {
    action: "deleted";
    installation: WebhookPayloadInstallationDeletedActionInstallation;
    repositories: Array<Item>;
    sender: WebhookPayloadInstallationDeletedActionSender;
  };
  type WebhookPayloadInstallationCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationCreatedActionInstallationPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    metadata: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadInstallationCreatedActionInstallationAccount = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadInstallationCreatedActionInstallation = {
    id: number;
    account: WebhookPayloadInstallationCreatedActionInstallationAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: WebhookPayloadInstallationCreatedActionInstallationPermissions;
    events: Array<any>;
    created_at: number;
    updated_at: number;
    single_file_name: null;
  };
  type WebhookPayloadInstallationCreatedAction = {
    action: "created";
    installation: WebhookPayloadInstallationCreatedActionInstallation;
    repositories: Array<Item>;
    sender: WebhookPayloadInstallationCreatedActionSender;
  };
  type WebhookPayloadGollumInstallation = { id: number; node_id: string };
  type WebhookPayloadGollumSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadGollum = {
    pages: Array<Item>;
    repository: PayloadRepository;
    sender: WebhookPayloadGollumSender;
    installation?: WebhookPayloadGollumInstallation;
  };
  type WebhookPayloadGithubAppAuthorizationRevokedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadGithubAppAuthorizationRevokedAction = {
    action: "revoked";
    sender: WebhookPayloadGithubAppAuthorizationRevokedActionSender;
  };
  type WebhookPayloadForkInstallation = { id: number; node_id: string };
  type WebhookPayloadForkSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadForkForkeeOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadForkForkee = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: WebhookPayloadForkForkeeOwner;
    html_url: string;
    description: null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled: boolean;
    open_issues_count: number;
    license: null;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    public: boolean;
  };
  type WebhookPayloadFork = {
    forkee: WebhookPayloadForkForkee;
    repository: PayloadRepository;
    sender: WebhookPayloadForkSender;
    installation?: WebhookPayloadForkInstallation;
  };
  type WebhookPayloadDeploymentStatusCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadDeploymentStatusCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDeploymentStatusCreatedActionDeploymentCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDeploymentStatusCreatedActionDeploymentPayload = {};
  type WebhookPayloadDeploymentStatusCreatedActionDeployment = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: WebhookPayloadDeploymentStatusCreatedActionDeploymentPayload;
    original_environment: string;
    environment: string;
    description: null;
    creator: WebhookPayloadDeploymentStatusCreatedActionDeploymentCreator;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
  };
  type WebhookPayloadDeploymentStatusCreatedActionDeploymentStatusCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDeploymentStatusCreatedActionDeploymentStatus = {
    url: string;
    id: number;
    node_id: string;
    state: string;
    creator: WebhookPayloadDeploymentStatusCreatedActionDeploymentStatusCreator;
    description: string;
    environment: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
  };
  type WebhookPayloadDeploymentStatusCreatedAction = {
    action: "created";
    deployment_status: WebhookPayloadDeploymentStatusCreatedActionDeploymentStatus;
    deployment: WebhookPayloadDeploymentStatusCreatedActionDeployment;
    repository: PayloadRepository;
    sender: WebhookPayloadDeploymentStatusCreatedActionSender;
    installation?: WebhookPayloadDeploymentStatusCreatedActionInstallation;
  };
  type WebhookPayloadDeploymentCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadDeploymentCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDeploymentCreatedActionDeploymentCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDeploymentCreatedActionDeploymentPayload = {};
  type WebhookPayloadDeploymentCreatedActionDeployment = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: WebhookPayloadDeploymentCreatedActionDeploymentPayload;
    original_environment: string;
    environment: string;
    description: null;
    creator: WebhookPayloadDeploymentCreatedActionDeploymentCreator;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
  };
  type WebhookPayloadDeploymentCreatedAction = {
    action: "created";
    deployment: WebhookPayloadDeploymentCreatedActionDeployment;
    repository: PayloadRepository;
    sender: WebhookPayloadDeploymentCreatedActionSender;
    installation?: WebhookPayloadDeploymentCreatedActionInstallation;
  };
  type WebhookPayloadDeployKeyDeletedAction = { action: "deleted" };
  type WebhookPayloadDeployKeyCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDeployKeyCreatedActionKey = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type WebhookPayloadDeployKeyCreatedAction = {
    action: "created";
    key: WebhookPayloadDeployKeyCreatedActionKey;
    repository: PayloadRepository;
    sender: WebhookPayloadDeployKeyCreatedActionSender;
  };
  type WebhookPayloadDeleteOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadDeleteInstallation = { id: number; node_id: string };
  type WebhookPayloadDeleteSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadDelete = {
    ref: string;
    ref_type: string;
    pusher_type: string;
    repository: PayloadRepository;
    sender: WebhookPayloadDeleteSender;
    installation?: WebhookPayloadDeleteInstallation;
    organization?: WebhookPayloadDeleteOrganization;
  };
  type WebhookPayloadCreateOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCreateInstallation = { id: number; node_id: string };
  type WebhookPayloadCreateSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCreate = {
    ref: string;
    ref_type: string;
    master_branch: string;
    description: null;
    pusher_type: string;
    repository: PayloadRepository;
    sender: WebhookPayloadCreateSender;
    installation?: WebhookPayloadCreateInstallation;
    organization?: WebhookPayloadCreateOrganization;
  };
  type WebhookPayloadContentReferenceCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadContentReferenceCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadContentReferenceCreatedActionContentReference = {
    id: number;
    node_id: string;
    reference: string;
  };
  type WebhookPayloadContentReferenceCreatedAction = {
    action: "created";
    content_reference: WebhookPayloadContentReferenceCreatedActionContentReference;
    repository: PayloadRepository;
    sender: WebhookPayloadContentReferenceCreatedActionSender;
    installation: WebhookPayloadContentReferenceCreatedActionInstallation;
  };
  type WebhookPayloadCommitCommentCreatedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadCommitCommentCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCommitCommentCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCommitCommentCreatedActionCommentUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCommitCommentCreatedActionComment = {
    url: string;
    html_url: string;
    id: number;
    node_id: string;
    user: WebhookPayloadCommitCommentCreatedActionCommentUser;
    position: null;
    line: null;
    path: null;
    commit_id: string;
    created_at: string;
    updated_at: string;
    author_association: string;
    body: string;
  };
  type WebhookPayloadCommitCommentCreatedAction = {
    action: "created";
    comment: WebhookPayloadCommitCommentCreatedActionComment;
    repository: PayloadRepository;
    sender: WebhookPayloadCommitCommentCreatedActionSender;
    organization?: WebhookPayloadCommitCommentCreatedActionOrganization;
    installation?: WebhookPayloadCommitCommentCreatedActionInstallation;
  };
  type WebhookPayloadCodeScanningAlertReopenedByUserAction = {
    action: "reopened_by_user";
  };
  type WebhookPayloadCodeScanningAlertReopenedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadCodeScanningAlertReopenedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type WebhookPayloadCodeScanningAlertReopenedActionAlertTool = {
    name: string;
    version: null;
  };
  type WebhookPayloadCodeScanningAlertReopenedActionAlertRule = {
    id: string;
    severity: string;
    description: string;
  };
  type WebhookPayloadCodeScanningAlertReopenedActionAlert = {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: Array<Item>;
    state: string;
    dismissed_by: null;
    dismissed_at: null;
    dismissed_reason: null;
    rule: WebhookPayloadCodeScanningAlertReopenedActionAlertRule;
    tool: WebhookPayloadCodeScanningAlertReopenedActionAlertTool;
  };
  type WebhookPayloadCodeScanningAlertReopenedAction = {
    action: "reopened";
    alert: WebhookPayloadCodeScanningAlertReopenedActionAlert;
    ref: string;
    commit_oid: string;
    repository: PayloadRepository;
    organization: WebhookPayloadCodeScanningAlertReopenedActionOrganization;
    installation?: WebhookPayloadCodeScanningAlertReopenedActionInstallation;
  };
  type WebhookPayloadCodeScanningAlertFixedAction = { action: "fixed" };
  type WebhookPayloadCodeScanningAlertCreatedAction = { action: "created" };
  type WebhookPayloadCodeScanningAlertClosedByUserAction = {
    action: "closed_by_user";
  };
  type WebhookPayloadCodeScanningAlertAppearedInBranchAction = {
    action: "appeared_in_branch";
  };
  type WebhookPayloadCheckSuiteRerequestedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCheckSuiteRerequestedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadCheckSuiteRerequestedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuiteHeadCommitCommitter = {
    name: string;
    email: string;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuiteHeadCommitAuthor = {
    name: string;
    email: string;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuiteHeadCommit = {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: WebhookPayloadCheckSuiteRerequestedActionCheckSuiteHeadCommitAuthor;
    committer: WebhookPayloadCheckSuiteRerequestedActionCheckSuiteHeadCommitCommitter;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuiteAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuiteApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckSuiteRerequestedActionCheckSuiteAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckSuiteRerequestedActionCheckSuiteAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckSuiteRerequestedActionCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<Item>;
    app: WebhookPayloadCheckSuiteRerequestedActionCheckSuiteApp;
    created_at: string;
    updated_at: string;
    latest_check_runs_count: number;
    check_runs_url: string;
    head_commit: WebhookPayloadCheckSuiteRerequestedActionCheckSuiteHeadCommit;
  };
  type WebhookPayloadCheckSuiteRerequestedAction = {
    action: "rerequested";
    check_suite: WebhookPayloadCheckSuiteRerequestedActionCheckSuite;
    repository: PayloadRepository;
    sender: WebhookPayloadCheckSuiteRerequestedActionSender;
    installation: WebhookPayloadCheckSuiteRerequestedActionInstallation;
    organization?: WebhookPayloadCheckSuiteRerequestedActionOrganization;
  };
  type WebhookPayloadCheckSuiteRequestedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCheckSuiteRequestedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadCheckSuiteRequestedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuiteHeadCommitCommitter = {
    name: string;
    email: string;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuiteHeadCommitAuthor = {
    name: string;
    email: string;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuiteHeadCommit = {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: WebhookPayloadCheckSuiteRequestedActionCheckSuiteHeadCommitAuthor;
    committer: WebhookPayloadCheckSuiteRequestedActionCheckSuiteHeadCommitCommitter;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuiteAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuiteApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckSuiteRequestedActionCheckSuiteAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckSuiteRequestedActionCheckSuiteAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckSuiteRequestedActionCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: null;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<any>;
    app: WebhookPayloadCheckSuiteRequestedActionCheckSuiteApp;
    created_at: string;
    updated_at: string;
    latest_check_runs_count: number;
    check_runs_url: string;
    head_commit: WebhookPayloadCheckSuiteRequestedActionCheckSuiteHeadCommit;
  };
  type WebhookPayloadCheckSuiteRequestedAction = {
    action: "requested";
    check_suite: WebhookPayloadCheckSuiteRequestedActionCheckSuite;
    repository: PayloadRepository;
    sender: WebhookPayloadCheckSuiteRequestedActionSender;
    installation: WebhookPayloadCheckSuiteRequestedActionInstallation;
    organization?: WebhookPayloadCheckSuiteRequestedActionOrganization;
  };
  type WebhookPayloadCheckSuiteCompletedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCheckSuiteCompletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuiteHeadCommitCommitter = {
    name: string;
    email: string;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuiteHeadCommitAuthor = {
    name: string;
    email: string;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuiteHeadCommit = {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: WebhookPayloadCheckSuiteCompletedActionCheckSuiteHeadCommitAuthor;
    committer: WebhookPayloadCheckSuiteCompletedActionCheckSuiteHeadCommitCommitter;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuiteAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuiteApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckSuiteCompletedActionCheckSuiteAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckSuiteCompletedActionCheckSuiteAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckSuiteCompletedActionCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<Item>;
    app: WebhookPayloadCheckSuiteCompletedActionCheckSuiteApp;
    created_at: string;
    updated_at: string;
    latest_check_runs_count: number;
    check_runs_url: string;
    head_commit: WebhookPayloadCheckSuiteCompletedActionCheckSuiteHeadCommit;
  };
  type WebhookPayloadCheckSuiteCompletedAction = {
    action: "completed";
    check_suite: WebhookPayloadCheckSuiteCompletedActionCheckSuite;
    repository: PayloadRepository;
    sender: WebhookPayloadCheckSuiteCompletedActionSender;
    organization?: WebhookPayloadCheckSuiteCompletedActionOrganization;
  };
  type WebhookPayloadCheckRunRerequestedActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadCheckRunRerequestedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunRerequestedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name?: string;
    company?: null;
    blog?: null;
    location?: null;
    email?: null;
    twitter_username?: null;
    is_verified?: boolean;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    public_repos?: number;
    public_gists?: number;
    followers?: number;
    following?: number;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    type?: string;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRunAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRunApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckRunRerequestedActionCheckRunAppOwner;
    name: string;
    description: null;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRunCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRunCheckSuiteApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckRunRerequestedActionCheckRunCheckSuiteAppOwner;
    name: string;
    description: null;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRunCheckSuite = {
    id: number;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<any>;
    app: WebhookPayloadCheckRunRerequestedActionCheckRunCheckSuiteApp;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRunOutput = {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  type WebhookPayloadCheckRunRerequestedActionCheckRun = {
    id: number;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    status: string;
    conclusion: string;
    started_at: string;
    completed_at: string;
    output: WebhookPayloadCheckRunRerequestedActionCheckRunOutput;
    name: string;
    check_suite: WebhookPayloadCheckRunRerequestedActionCheckRunCheckSuite;
    app: WebhookPayloadCheckRunRerequestedActionCheckRunApp;
    pull_requests: Array<any>;
  };
  type WebhookPayloadCheckRunRerequestedAction = {
    action: "rerequested";
    check_run: WebhookPayloadCheckRunRerequestedActionCheckRun;
    repository: PayloadRepository;
    organization: WebhookPayloadCheckRunRerequestedActionOrganization;
    sender: WebhookPayloadCheckRunRerequestedActionSender;
    installation: WebhookPayloadCheckRunRerequestedActionInstallation;
  };
  type WebhookPayloadCheckRunRequestedActionActionInstallation = {
    id: number;
    node_id: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunRequestedActionActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type PayloadRepositoryLicense = null | {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionRequestedAction = {
    identifier: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunAppPermissions = {
    checks: string;
    members: string;
    metadata: string;
    pull_requests: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunApp = {
    id: number;
    slug: string;
    node_id: string;
    owner: WebhookPayloadCheckRunRequestedActionActionCheckRunAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckRunRequestedActionActionCheckRunAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuiteAppPermissions = {
    checks: string;
    members: string;
    metadata: string;
    pull_requests: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuiteApp = {
    id: number;
    slug: string;
    node_id: string;
    owner: WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuiteAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuiteAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: null;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<Item>;
    app: WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuiteApp;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRunOutput = {
    title: string;
    summary: string;
    text: null;
    annotations_count: number;
    annotations_url: string;
  };
  type WebhookPayloadCheckRunRequestedActionActionCheckRun = {
    id: number;
    node_id: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url: string;
    status: string;
    conclusion: null;
    started_at: string;
    completed_at: null;
    output: WebhookPayloadCheckRunRequestedActionActionCheckRunOutput;
    name: string;
    check_suite: WebhookPayloadCheckRunRequestedActionActionCheckRunCheckSuite;
    app: WebhookPayloadCheckRunRequestedActionActionCheckRunApp;
    pull_requests: Array<Item>;
  };
  type WebhookPayloadCheckRunRequestedActionAction = {
    action: "requested_action";
    check_run: WebhookPayloadCheckRunRequestedActionActionCheckRun;
    requested_action: WebhookPayloadCheckRunRequestedActionActionRequestedAction;
    repository: PayloadRepository;
    organization: WebhookPayloadCheckRunRequestedActionActionOrganization;
    sender: WebhookPayloadCheckRunRequestedActionActionSender;
    installation: WebhookPayloadCheckRunRequestedActionActionInstallation;
  };
  type WebhookPayloadCheckRunCreatedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCheckRunCreatedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckRunCreatedActionCheckRunAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckRunCreatedActionCheckRunAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunCheckSuiteAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunCheckSuiteApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckRunCreatedActionCheckRunCheckSuiteAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckRunCreatedActionCheckRunCheckSuiteAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: null;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<Item>;
    app: WebhookPayloadCheckRunCreatedActionCheckRunCheckSuiteApp;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRunOutput = {
    title: null;
    summary: null;
    text: null;
    annotations_count: number;
    annotations_url: string;
  };
  type WebhookPayloadCheckRunCreatedActionCheckRun = {
    id: number;
    node_id: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url: string;
    status: string;
    conclusion: null;
    started_at: string;
    completed_at: null;
    output: WebhookPayloadCheckRunCreatedActionCheckRunOutput;
    name: string;
    check_suite: WebhookPayloadCheckRunCreatedActionCheckRunCheckSuite;
    app: WebhookPayloadCheckRunCreatedActionCheckRunApp;
    pull_requests: Array<Item>;
  };
  type WebhookPayloadCheckRunCreatedAction = {
    action: "created";
    check_run: WebhookPayloadCheckRunCreatedActionCheckRun;
    repository: PayloadRepository;
    sender: WebhookPayloadCheckRunCreatedActionSender;
    organization?: WebhookPayloadCheckRunCreatedActionOrganization;
  };
  type WebhookPayloadCheckRunCompletedActionOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name: string;
    company: null;
    blog: null;
    location: null;
    email: null;
    twitter_username: null;
    is_verified: boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    updated_at: string;
    type: string;
  };
  type WebhookPayloadCheckRunCompletedActionSender = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type PayloadRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name?: string;
    email?: string;
  };
  type PayloadRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: PayloadRepositoryOwner;
    html_url: string;
    description: null | string;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: string | number;
    updated_at: string;
    pushed_at: string | number;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: null | string;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: null;
    archived: boolean;
    disabled?: boolean;
    open_issues_count: number;
    license: PayloadRepositoryLicense;
    forks: number;
    open_issues: number;
    watchers: number;
    default_branch: string;
    stargazers?: number;
    master_branch?: string;
    permissions?: PayloadRepositoryPermissions;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckRunCompletedActionCheckRunAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckRunCompletedActionCheckRunAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunCheckSuiteAppPermissions = {
    administration: string;
    checks: string;
    contents: string;
    deployments: string;
    issues: string;
    members: string;
    metadata: string;
    organization_administration: string;
    organization_hooks: string;
    organization_plan: string;
    organization_projects: string;
    organization_user_blocking: string;
    pages: string;
    pull_requests: string;
    repository_hooks: string;
    repository_projects: string;
    statuses: string;
    team_discussions: string;
    vulnerability_alerts: string;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunCheckSuiteAppOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunCheckSuiteApp = {
    id: number;
    node_id: string;
    owner: WebhookPayloadCheckRunCompletedActionCheckRunCheckSuiteAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: WebhookPayloadCheckRunCompletedActionCheckRunCheckSuiteAppPermissions;
    events: Array<any>;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<Item>;
    app: WebhookPayloadCheckRunCompletedActionCheckRunCheckSuiteApp;
    created_at: string;
    updated_at: string;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRunOutput = {
    title: null;
    summary: null;
    text: null;
    annotations_count: number;
    annotations_url: string;
  };
  type WebhookPayloadCheckRunCompletedActionCheckRun = {
    id: number;
    node_id: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url: string;
    status: string;
    conclusion: string;
    started_at: string;
    completed_at: string;
    output: WebhookPayloadCheckRunCompletedActionCheckRunOutput;
    name: string;
    check_suite: WebhookPayloadCheckRunCompletedActionCheckRunCheckSuite;
    app: WebhookPayloadCheckRunCompletedActionCheckRunApp;
    pull_requests: Array<Item>;
  };
  type WebhookPayloadCheckRunCompletedAction = {
    action: "completed";
    check_run: WebhookPayloadCheckRunCompletedActionCheckRun;
    repository: PayloadRepository;
    sender: WebhookPayloadCheckRunCompletedActionSender;
    organization?: WebhookPayloadCheckRunCompletedActionOrganization;
  };
  type WebhookPayloadCheckRun =
    | WebhookPayloadCheckRunCompletedAction
    | WebhookPayloadCheckRunCreatedAction
    | WebhookPayloadCheckRunRequestedActionAction
    | WebhookPayloadCheckRunRerequestedAction;
  type WebhookPayloadCheckSuite =
    | WebhookPayloadCheckSuiteCompletedAction
    | WebhookPayloadCheckSuiteRequestedAction
    | WebhookPayloadCheckSuiteRerequestedAction;
  type WebhookPayloadCodeScanningAlert =
    | WebhookPayloadCodeScanningAlertAppearedInBranchAction
    | WebhookPayloadCodeScanningAlertClosedByUserAction
    | WebhookPayloadCodeScanningAlertCreatedAction
    | WebhookPayloadCodeScanningAlertFixedAction
    | WebhookPayloadCodeScanningAlertReopenedAction
    | WebhookPayloadCodeScanningAlertReopenedByUserAction;
  type WebhookPayloadCommitComment = WebhookPayloadCommitCommentCreatedAction;
  type WebhookPayloadContentReference = WebhookPayloadContentReferenceCreatedAction;
  type WebhookPayloadDeployKey =
    | WebhookPayloadDeployKeyCreatedAction
    | WebhookPayloadDeployKeyDeletedAction;
  type WebhookPayloadDeployment = WebhookPayloadDeploymentCreatedAction;
  type WebhookPayloadDeploymentStatus = WebhookPayloadDeploymentStatusCreatedAction;
  type WebhookPayloadGithubAppAuthorization = WebhookPayloadGithubAppAuthorizationRevokedAction;
  type WebhookPayloadInstallation =
    | WebhookPayloadInstallationCreatedAction
    | WebhookPayloadInstallationDeletedAction
    | WebhookPayloadInstallationNewPermissionsAcceptedAction
    | WebhookPayloadInstallationSuspendAction
    | WebhookPayloadInstallationUnsuspendAction;
  type WebhookPayloadInstallationRepositories =
    | WebhookPayloadInstallationRepositoriesAddedAction
    | WebhookPayloadInstallationRepositoriesRemovedAction;
  type WebhookPayloadIssueComment =
    | WebhookPayloadIssueCommentCreatedAction
    | WebhookPayloadIssueCommentDeletedAction
    | WebhookPayloadIssueCommentEditedAction;
  type WebhookPayloadIssues =
    | WebhookPayloadIssuesAssignedAction
    | WebhookPayloadIssuesClosedAction
    | WebhookPayloadIssuesDeletedAction
    | WebhookPayloadIssuesDemilestonedAction
    | WebhookPayloadIssuesEditedAction
    | WebhookPayloadIssuesLabeledAction
    | WebhookPayloadIssuesLockedAction
    | WebhookPayloadIssuesMilestonedAction
    | WebhookPayloadIssuesOpenedAction
    | WebhookPayloadIssuesPinnedAction
    | WebhookPayloadIssuesReopenedAction
    | WebhookPayloadIssuesTransferredAction
    | WebhookPayloadIssuesUnassignedAction
    | WebhookPayloadIssuesUnlabeledAction
    | WebhookPayloadIssuesUnlockedAction
    | WebhookPayloadIssuesUnpinnedAction;
  type WebhookPayloadLabel =
    | WebhookPayloadLabelCreatedAction
    | WebhookPayloadLabelDeletedAction
    | WebhookPayloadLabelEditedAction;
  type WebhookPayloadMarketplacePurchase =
    | WebhookPayloadMarketplacePurchaseCancelledAction
    | WebhookPayloadMarketplacePurchaseChangedAction
    | WebhookPayloadMarketplacePurchasePendingChangeAction
    | WebhookPayloadMarketplacePurchasePendingChangeCancelledAction
    | WebhookPayloadMarketplacePurchasePurchasedAction;
  type WebhookPayloadMember =
    | WebhookPayloadMemberAddedAction
    | WebhookPayloadMemberEditedAction
    | WebhookPayloadMemberRemovedAction;
  type WebhookPayloadMembership =
    | WebhookPayloadMembershipAddedAction
    | WebhookPayloadMembershipRemovedAction;
  type WebhookPayloadMeta = WebhookPayloadMetaDeletedAction;
  type WebhookPayloadMilestone =
    | WebhookPayloadMilestoneClosedAction
    | WebhookPayloadMilestoneCreatedAction
    | WebhookPayloadMilestoneDeletedAction
    | WebhookPayloadMilestoneEditedAction
    | WebhookPayloadMilestoneOpenedAction;
  type WebhookPayloadOrganization =
    | WebhookPayloadOrganizationDeletedAction
    | WebhookPayloadOrganizationMemberAddedAction
    | WebhookPayloadOrganizationMemberInvitedAction
    | WebhookPayloadOrganizationMemberRemovedAction
    | WebhookPayloadOrganizationRenamedAction;
  type WebhookPayloadOrgBlock =
    | WebhookPayloadOrgBlockBlockedAction
    | WebhookPayloadOrgBlockUnblockedAction;
  type WebhookPayloadPackage =
    | WebhookPayloadPackagePublishedAction
    | WebhookPayloadPackageUpdatedAction;
  type WebhookPayloadProjectCard =
    | WebhookPayloadProjectCardConvertedAction
    | WebhookPayloadProjectCardCreatedAction
    | WebhookPayloadProjectCardDeletedAction
    | WebhookPayloadProjectCardEditedAction
    | WebhookPayloadProjectCardMovedAction;
  type WebhookPayloadProjectColumn =
    | WebhookPayloadProjectColumnCreatedAction
    | WebhookPayloadProjectColumnDeletedAction
    | WebhookPayloadProjectColumnEditedAction
    | WebhookPayloadProjectColumnMovedAction;
  type WebhookPayloadProject =
    | WebhookPayloadProjectClosedAction
    | WebhookPayloadProjectCreatedAction
    | WebhookPayloadProjectDeletedAction
    | WebhookPayloadProjectEditedAction
    | WebhookPayloadProjectReopenedAction;
  type WebhookPayloadPullRequest =
    | WebhookPayloadPullRequestAssignedAction
    | WebhookPayloadPullRequestClosedAction
    | WebhookPayloadPullRequestEditedAction
    | WebhookPayloadPullRequestLabeledAction
    | WebhookPayloadPullRequestLockedAction
    | WebhookPayloadPullRequestMergedAction
    | WebhookPayloadPullRequestOpenedAction
    | WebhookPayloadPullRequestReadyForReviewAction
    | WebhookPayloadPullRequestReopenedAction
    | WebhookPayloadPullRequestReviewRequestRemovedAction
    | WebhookPayloadPullRequestReviewRequestedAction
    | WebhookPayloadPullRequestSynchronizeAction
    | WebhookPayloadPullRequestUnassignedAction
    | WebhookPayloadPullRequestUnlabeledAction
    | WebhookPayloadPullRequestUnlockedAction;
  type WebhookPayloadPullRequestReview =
    | WebhookPayloadPullRequestReviewDismissedAction
    | WebhookPayloadPullRequestReviewEditedAction
    | WebhookPayloadPullRequestReviewSubmittedAction;
  type WebhookPayloadPullRequestReviewComment =
    | WebhookPayloadPullRequestReviewCommentCreatedAction
    | WebhookPayloadPullRequestReviewCommentDeletedAction
    | WebhookPayloadPullRequestReviewCommentEditedAction;
  type WebhookPayloadRelease =
    | WebhookPayloadReleaseCreatedAction
    | WebhookPayloadReleaseDeletedAction
    | WebhookPayloadReleaseEditedAction
    | WebhookPayloadReleasePrereleasedAction
    | WebhookPayloadReleasePublishedAction
    | WebhookPayloadReleaseReleasedAction
    | WebhookPayloadReleaseUnpublishedAction;
  type WebhookPayloadRepositoryDispatch = WebhookPayloadRepositoryDispatchOnDemandTestAction;
  type WebhookPayloadRepository =
    | WebhookPayloadRepositoryArchivedAction
    | WebhookPayloadRepositoryCreatedAction
    | WebhookPayloadRepositoryDeletedAction
    | WebhookPayloadRepositoryEditedAction
    | WebhookPayloadRepositoryPrivatizedAction
    | WebhookPayloadRepositoryPublicizedAction
    | WebhookPayloadRepositoryRenamedAction
    | WebhookPayloadRepositoryTransferredAction
    | WebhookPayloadRepositoryUnarchivedAction;
  type WebhookPayloadRepositoryVulnerabilityAlert =
    | WebhookPayloadRepositoryVulnerabilityAlertCreateAction
    | WebhookPayloadRepositoryVulnerabilityAlertDismissAction
    | WebhookPayloadRepositoryVulnerabilityAlertResolveAction;
  type WebhookPayloadSecretScanningAlert =
    | WebhookPayloadSecretScanningAlertCreatedAction
    | WebhookPayloadSecretScanningAlertReopenedAction
    | WebhookPayloadSecretScanningAlertResolvedAction;
  type WebhookPayloadSecurityAdvisory =
    | WebhookPayloadSecurityAdvisoryPerformedAction
    | WebhookPayloadSecurityAdvisoryPublishedAction
    | WebhookPayloadSecurityAdvisoryUpdatedAction;
  type WebhookPayloadSponsorship =
    | WebhookPayloadSponsorshipCancelledAction
    | WebhookPayloadSponsorshipCreatedAction
    | WebhookPayloadSponsorshipEditedAction
    | WebhookPayloadSponsorshipPendingCancellationAction
    | WebhookPayloadSponsorshipPendingTierChangeAction
    | WebhookPayloadSponsorshipTierChangedAction;
  type WebhookPayloadStar =
    | WebhookPayloadStarCreatedAction
    | WebhookPayloadStarDeletedAction;
  type WebhookPayloadTeam =
    | WebhookPayloadTeamAddedToRepositoryAction
    | WebhookPayloadTeamCreatedAction
    | WebhookPayloadTeamDeletedAction
    | WebhookPayloadTeamEditedAction
    | WebhookPayloadTeamRemovedFromRepositoryAction;
  type WebhookPayloadWatch = WebhookPayloadWatchStartedAction;
  type WebhookPayloadWorkflowRun =
    | WebhookPayloadWorkflowRunActionAction
    | WebhookPayloadWorkflowRunCompletedAction
    | WebhookPayloadWorkflowRunRequestedAction;
}
